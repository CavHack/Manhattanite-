#gowanus perceptron
#author: Karl Whitford
#All rights reserved.

import numpy as np
import matplotlib.pyplot as plt


#classifying range
def f(x):
    return 1 if x > 0 else -1

def draw(X, y, w):
    """""
    This f(x) creates a boundary decision mapping function.  
    """""
    for i in xrange(X.shape[0]):
        if y[i] == 1:
            plt.plot(X[i, 0], X[i, 1], 'ro')
        else:
            plt.plot(X[i, 0], X[i, 1], 'bx')

    xmin = X.min(axis=0)
    xmax = X.max(axis=0)

    xx = [xmin[0] - 1, xmax[0] + 1]
    yy = -(w[2] + w[0]*xx)/w[1]
    plt.plot(xx, yy, 'k')
    plt.axis([xmin[0] - 1, xmax[0] + 1, xmin[1] -1, xmax[1] + 1])
    plt.show()

def gowanusPercp(X, y,output_file, animate=False):
    """"
    Implements Perceptron Learning Algorithm which shall return a list of weights, that represent a hyperplane that serves as a linear separator of data
    """""
    d = X.shape[1]
    w = np.zeros((d + 1, 1))
    conv = False

    open(output_file, 'w').close()
    while not conv:
        conv = True
        for i in xrange.(X.shape[0]):
            if y[i]*f(w[-1] + np.dot(X[[i], :], w[:-1, [0]])))
